{
  
    
        "post0": {
            "title": "Sports Classifier",
            "content": "We will train a classifier which will distinguish between images four sports - tennis, cricket, badminton and baseball. We will be using fastai and transfer learning to train Resnet18 model in few minutes. Deep learning has become easy and fun and anyone can do it using the google colab. . from fastai.vision.all import * from fastbook import * from fastai.vision.widgets import * . Dataset creation . Here we have used bing image search API to create a dataset. We will need to create Azure account and obtain a key. . import os key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;05c05b835dbc4aabb0aa2ac65d74675c&#39;) . Sample procedure . Here is the an example of how to collect images of tennis . we will use the Azure key and term associated to which we want to find the images, and get a dictionary containing information about the images. | from this dictionary we will extract all the urls of the images. | . results = search_images_bing(key, &#39;tennis&#39;) ims = results.attrgot(&#39;contentUrl&#39;) len(ims) . 150 . results[0] . {&#39;accentColor&#39;: &#39;9CA625&#39;, &#39;contentSize&#39;: &#39;302703 B&#39;, &#39;contentUrl&#39;: &#39;https://cdn.tennis.com/uploads/img/2016/10/13/federer-roger062614-ap-ftrjpg_t4qw3pbbmgn619tnq3hh8bc2d.jpg&#39;, &#39;datePublished&#39;: &#39;2021-03-11T02:41:00.0000000Z&#39;, &#39;encodingFormat&#39;: &#39;jpeg&#39;, &#39;height&#39;: 1080, &#39;hostPageDiscoveredDate&#39;: &#39;2019-10-26T00:00:00.0000000Z&#39;, &#39;hostPageDisplayUrl&#39;: &#39;https://www.tennis.com/pro-game/2016/10/novak-djokovic-rafael-nadal-roger-federer-atp...&#39;, &#39;hostPageUrl&#39;: &#39;https://www.tennis.com/pro-game/2016/10/novak-djokovic-rafael-nadal-roger-federer-atp-tennis/61775/&#39;, &#39;imageId&#39;: &#39;9C6052644F1CE5C1BAD8E60F2C346400D8847EA7&#39;, &#39;imageInsightsToken&#39;: &#39;ccid_HxVroYuq*cp_6F3D21E8EB4E5CA7D5359BD5E5C81D6C*mid_9C6052644F1CE5C1BAD8E60F2C346400D8847EA7*simid_608007759657524264*thid_OIP.HxVroYuqkJXQHOrl-fi4-gHaEK&#39;, &#39;insightsMetadata&#39;: {&#39;availableSizesCount&#39;: 1, &#39;pagesIncludingCount&#39;: 2, &#39;recipeSourcesCount&#39;: 0}, &#39;isFamilyFriendly&#39;: True, &#39;name&#39;: &#34;Djokovic: Despite disappointing seasons, don&#39;t count out ...&#34;, &#39;thumbnail&#39;: {&#39;height&#39;: 266, &#39;width&#39;: 474}, &#39;thumbnailUrl&#39;: &#39;https://tse3.mm.bing.net/th?id=OIP.HxVroYuqkJXQHOrl-fi4-gHaEK&amp;pid=Api&#39;, &#39;webSearchUrl&#39;: &#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=tennis&amp;id=9C6052644F1CE5C1BAD8E60F2C346400D8847EA7&amp;simid=608007759657524264&#39;, &#39;width&#39;: 1920} . ims[0] . &#39;https://cdn.tennis.com/uploads/img/2016/10/13/federer-roger062614-ap-ftrjpg_t4qw3pbbmgn619tnq3hh8bc2d.jpg&#39; . download the image and view it. | . dest = main_dir/&#39;images&#39; dest.mkdir(exist_ok=True) download_url(ims[0], dest/&#39;tennis.jpg&#39;) . img = Image.open(dest/&#39;tennis.jpg&#39;) img.to_thumb(128, 128) . Gathering data . Here we are collection image of cricket, badminton, tennis and baseball. . sport_type = &#39;cricket&#39;, &#39;badminton&#39;, &#39;tennis&#39;, &#39;baseball&#39; path = main_dir/&#39;sports&#39; . if not path.exists(): path.mkdir() for s in sport_type: dest = (path/s) dest.mkdir(exist_ok=True) results = search_images_bing(key, s) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(path) len(fns) . 545 . The images which we downloaded might be corrupted, so we will check if we are able to open the images by try to open the image. Then we delete all the corrupted images. . failed = verify_images(fns) failed.map(Path.unlink) . (#9) [None,None,None,None,None,None,None,None,None] . Assembling data . sports = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=40), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.8), batch_tfms=aug_transforms() ) . dls = sports.dataloaders(path) . Data augmentation applied to each image where we center crop the image and zoom in or out randomly. . dls.train.show_batch(max_n=5, nrows=1, unique=True) . dls.valid.show_batch(max_n=5, nrows=1) . Classifier . We will be using a resnet18 CNN architecture to create our classifier. . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.027982 | 1.317837 | 0.432692 | 00:28 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . epoch train_loss valid_loss error_rate time . 0 | 0.994832 | 0.704699 | 0.259615 | 00:28 | . 1 | 0.777438 | 0.506656 | 0.173077 | 00:28 | . 2 | 0.636937 | 0.467426 | 0.153846 | 00:28 | . 3 | 0.519604 | 0.455810 | 0.163462 | 00:28 | . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . Model interpretation and cleaning . Lets see what our classifier has learnt, and clean our dataset by removing unwanted images. . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . /usr/local/lib/python3.7/dist-packages/PIL/Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx, cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . After cleaning the dataset and removing unwanted images we will try to train our model again. . Below we are save the weights of our model. . learn.export(main_dir/&#39;sports.pkl&#39;) .",
            "url": "https://suchith720.github.io/suchith_prabhu/fastpages/jupyter/2021/07/03/sports_classifier_lesson.html",
            "relUrl": "/fastpages/jupyter/2021/07/03/sports_classifier_lesson.html",
            "date": " • Jul 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://suchith720.github.io/suchith_prabhu/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://suchith720.github.io/suchith_prabhu/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Phd Scholor at Indian Institute of Technology, Delhi. I am a passionate programmer. I am interested in Deep Learning. In my free time, I like reading about Deep Learning related news and articles. .",
          "url": "https://suchith720.github.io/suchith_prabhu/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://suchith720.github.io/suchith_prabhu/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}